---
title: "Output options"
subtitle: "Get different kinds of output from OpenCage"
author: "Daniel Possenriede, Jesse Sadler, MaÃ«lle Salmon"
date: "`r Sys.Date()`"
description: >
  "`oc_forward()`/`oc_reverse()` return lists of various type, namely data frames, JSON, GeoJSON or URLs, depending on the `return` value you specify. The possible `return` values are `df_list`, `json_list`, `geojson_list` and `url_only`."
output: 
  rmarkdown::html_vignette:
    df_print: kable
vignette: >
  %\VignetteIndexEntry{Output options}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, echo=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)

library("opencage")

```

{opencage} contains two types of main functions. 

1. The `oc_forward_df()`/`oc_reverse_df()` functions, which always return a single tibble.
2. The `oc_forward()`/`oc_reverse()` functions, which return lists of various types, depending on the `return` value you specify. The possible `return` values are `df_list`, `json_list`, `geojson_list` and `url_only`.

We have shown the `oc_forward_df()`/`oc_reverse_df()` functions in the [Introduction to opencage](intro_opencage.html) and the [Customise your query](customise_query.html) vignettes. 
The function arguments mentioned in the other vignettes are also available with `oc_forward()`/`oc_reverse()`, in general.
Here we will show the different return values available with `oc_forward()`/`oc_reverse()`. 

## `df_list`

The default return value is `df_list`. 
It returns a list of tibbles.  

```{r df_list}
oc_forward("Casey Station", return = "df_list")
```

The `df_list` type drives the `oc_forward_df()`/`oc_reverse_df()` functions.
If you want to use opencage in a `dplyr::mutate()` chain you can do it like this:

```{r mutate}
library(dplyr, warn.conflicts = FALSE)

oc_data <- 
  tibble(place = "Casey Station") %>% 
  mutate(oc_result = oc_forward(place))

oc_data
```

This creates the list column `oc_result`, which can be easily unnested with `tidyr::unnest()`

```{r unnest}
library(tidyr, warn.conflicts = FALSE)

oc_data %>% unnest(oc_result)
```

## `json_list`

OpenCage's main output format is JSON. When you specify `json_list` as the return type, you get the JSON as an R `list()`. 

```{r json_list}
oc_forward("Casey Station", return = "json_list")
```

## `geojson_list`

When you choose `geojson_list` as the return type, the geocoder response will be returned as GeoJSON specified as an R `list()`.

```{r geojson_list}
gjsn_lst <- oc_forward("Casey Station", return = "geojson_list")
gjsn_lst
```

In fact, {opencage} returns a list of results in `geo_list` format, which should be compatible with the {[geojsonio](https://docs.ropensci.org/geojsonio)} package.

```{r geo_list}
class(gjsn_lst[[1]])
```


## `url_only`

`url_only` will return the OpenCage URL for debugging purposes. 
We won't show the output here, because the URL contains the OpenCage API key. 

```{r url_only, eval=FALSE, include=TRUE}
oc_forward("Casey Station", return = "url_only")
```

## `xml`

{opencage} does not support the XML response type at the moment. 
Please file an [issue](https://github.com/ropensci/opencage/issues) if you have a use-case that requires this.

## Return query text

`oc_forward()` and `oc_reverse()` have an `add_request` argument, indicating whether the request is returned again with the results. 
If the `return` value is a `df_list`, the `placename` or `latitude,longitude` is added as a column to the results without a roundtrip to the API.
`json_list` results will contain all request parameters as returned by the API, including the API key used, so handle with care!
`add_request` is currently ignored by OpenCage for GeoJSON results.
